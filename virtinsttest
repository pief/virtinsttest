#!/usr/bin/python
# encoding: utf-8
#
# virtinsttest - Virtual installation testing script
#
# Copyright (c) 2015 Pieter Hollants <pieter@hollants.com>
# Licensed under the GNU Public License (GPL) version 3.
#

# virtinsttest version -- this stays "unknown" for development versions
# and gets automatically replaced with proper values when creating a
# release
VirtInstTestVersion = "unknown"

import sys, os, re, argparse, ConfigParser, glob, logging
import itertools, atexit, traceback, tempfile, shutil, tarfile, subprocess, time
import libvirt, StringIO, PIL.Image, PIL.ImageOps, PIL.ImageFont, PIL.ImageDraw, cv2, numpy

# The installation state that must be reached in stage 1 to consider the
# stage to have completed successfully
INSTSTATE_STAGE1_FINISHED = 99

def ProcessCmdLineArgs():
	parser = argparse.ArgumentParser(
		description="Virtual installation testing",
		formatter_class=argparse.ArgumentDefaultsHelpFormatter
	)
	parser.add_argument(
		"--version",
		help="output version information and exit",
		action="version",
		version="%(prog)s {0}".format(VirtInstTestVersion)
	)
	parser.add_argument(
		"--cfgfile",
		help="reads CFGFILE as configuration file",
		metavar="FILE",
		default="virtinsttest.conf"
	)
	parser.add_argument(
		"--loglevel",
		dest="loglevel",
		help="sets the log level",
		default="debug"
	)
	parser.add_argument(
		"--plugin-dir",
		dest="plugindir",
		help="sets the path to virtinsttest's plugins",
		metavar="DIR",
		default=os.path.join(os.path.dirname(sys.argv[0]), "plugins")
	)
	parser.add_argument(
		"--libvirtd-uri",
		dest="libvirtduri",
		help="sets the path of the libvirtd instance to connect to",
		default="qemu:///session"
	)
	parser.add_argument(
		"--keep-tmpdir",
		dest="keeptmpdir",
		help="do not delete temporary directory at exit (for debugging purposes)",
		action="store_true",
		default=False
	)
	parser.add_argument(
		"--keep-vm",
		dest="keepvm",
		help="do not delete the virtual machine and its storage after successful installations (for debugging purposes)",
		action="store_true",
		default=False
	)
	parser.add_argument(
		"--video",
		dest="video",
		help="create a video of the VM console output",
		metavar="FILE",
		default=None
	)
	parser.add_argument(
		"--video-font",
		dest="videofont",
		help="specifies the font to use for subtitling the video",
		metavar="FONT",
		default="/usr/share/fonts/truetype/LiberationSans-Regular.ttf"
	)
	parser.add_argument(
		"--video-width",
		dest="videowidth",
		help="sets the maximum expectable VM console width",
		metavar="PIXELS",
		default=1024,
		type=int
	)
	parser.add_argument(
		"--video-height",
		dest="videoheight",
		help="sets the maximum expectable VM console height",
		metavar="PIXELS",
		default=768,
		type=int
	)
	parser.add_argument(
		"--video-framerate",
		dest="videoframerate",
		help="specifies how often to capture the VM console (CAUTION: setting this too high may make installation monitoring too slow!)",
		metavar="FPS",
		default=5.0,
		type=float
	)
	return parser.parse_args()

def SetupLogging(loglevel):
	# The main program uses the root logger while plugins will use loggers
	# named after their class names. The log level set here propagates to
	# these descendant loggers.
	logger = logging.getLogger()
	logger.setLevel(loglevel)

	# We always log to stdout
	loghandler = logging.StreamHandler()

	# Define a log formatter that deals with multi-line log messages by
	# repeating the prefix at the beginning of each line. Also supports
	# colored severity levels.
	class MultiLineColorFormatter(logging.Formatter):
		colors = dict(zip([ "RED", "GREEN", "YELLOW", "BLUE", "MAGENTA", "CYAN" ], map(lambda x: 31+x, range(6))))

		severitycolors = {
			"WARN": "YELLOW", "WARNING": "YELLOW", "ERROR": "RED", "CRITICAL": "RED", "INFO": "MAGENTA", "DEBUG": "BLUE"
		}

		def format(self, record):
			# Might not always have been imported
			import logging

			# Compose the "source" of the log message (function name
			# and line number)
			if record.funcName == "<module>":
				record.source = "{0}:Main:{1}".format(record.name, record.lineno)
			else:
				record.source = "{0}:{1}():{2}".format(record.name, record.funcName, record.lineno)

			# Define levelcolor property associated with record's severity level
			record.levelcolor = "\033[1;{0}m".format(self.colors[self.severitycolors[record.levelname]])
			record.nocolor    = "\033[0m"

			# Format the record into a string...
			str = logging.Formatter.format(self, record)

			# ...and add the prefix after every newline
			prefix = str[:str.rfind(record.message)]
			str = str.replace("\n", "\n{0}".format(prefix))

			return str

    # Use the log formatter among with a custom log format that includes
    # among other things an ISO date format, the source of the log message
    # (as composed above) and the message's severity level in color.
	loghandler.setFormatter(
		MultiLineColorFormatter(
            fmt = "%(asctime)s %(source)-38.38s %(levelcolor)s%(levelname)-8.8s%(nocolor)s: %(message)s",
			datefmt = "%Y-%m-%d %H:%M:%S"
		)
	)

	# Add it to our logger
	logger.addHandler(loghandler)

def GlobalExceptionHandler(cls, e, tb):
	""" Global exception handler installed as soon as logging is available. """

	if cls is KeyboardInterrupt:
		print ""
	else:
		msg = "*** Unhandled exception in {0}! ***\n".format(os.path.basename(sys.argv[0]))
		msg = msg + "".join(traceback.format_exception(cls, e, tb))
		logger.critical(msg)

	logger.info("Exiting!")

	sys.exit(-1)

def ReadConfigFile(cfgfilename):
	cfg = {}

	# Use the ConfigParser module
	cfgparser = ConfigParser.ConfigParser()

	# Try to open the specified cfgfile
	try:
		with open(cfgfilename) as f:
			cfgparser.readfp(f)
	except IOError as e:
		msg = "Opening config file {0} failed: {1}!"
		logger.error(msg.format(cfgfilename, e.strerror))
		sys.exit(1)

	# Extract config values
	try:
		section = "General"
		cfg["instname"] = cfgparser.get(section, "Name")

		section = "Resources"
		cfg["cpus"] = cfgparser.get(section, "CPUs")
		cfg["memory"] = cfgparser.get(section, "Memory")

		cfg["virtualdisks"] = []
		for i in itertools.count():
			directive = "Disk{0}".format(i+1)
			try:
				v = cfgparser.get(section, directive).split(",")
				cfg["virtualdisks"].append({
					"name": v[0],
					"size": v[1],
					"bootorder": v[2]
				})
			except ConfigParser.NoOptionError:
				break

		section = "Install"
		cfg["isoimage"]   = cfgparser.get(section, "ISOImage")
		cfg["mountpoint"] = cfgparser.get(section, "Mountpoint")
		cfg["usbsticks"] = []
		for i in itertools.count():
			try:
				v = cfgparser.get(section, "USBStick{0}".format(i+1)).split(",")
				cfg["usbsticks"].append({
					"name": "USBStick{0}".format(i+1),
					"size": v[0],
					"sourcedir": os.path.abspath(v[1])
				})
			except ConfigParser.NoOptionError:
				break
		try:
			cfg["extraargs"] = cfgparser.get(section, "ExtraArgs")
		except ConfigParser.NoOptionError:
			cfg["extraargs"] = None
	except ConfigParser.NoSectionError:
		logger.error("Config file {0} has no {1} section!".format(cfgfilename, section))
		sys.exit(1)

	return cfg

def DetectOS(path):
	""" Tries to detect OS installation media using plugins.

	If a plugin could be found that detected a support OS, a reference
	to that plugin's instance is returned.

	:param string path: Path to a mounted OS installation medium
	:rtype Tuple(plugin, rules) or Tuple(None, None) """

	logger.debug("Trying plugins to detect operating system...")

	# Find files ending in "_plugin.py"
	for pluginfile in glob.glob(os.path.join(args.plugindir, "*_plugin.py")):
		# Try to find a class name deriving from VirtInstTestPlugin
		classname = None
		with open(pluginfile, "r") as f:
			for line in f.readlines():
				m = re.match("class (.*)\(VirtInstTestPlugin\)", line)
				if m and m.group(1):
					pluginname = m.group(1)
		if not pluginname:
			continue

		# Import the class from the module
		exec "from {1} import {0}".format(
			pluginname,
			os.path.basename(pluginfile).replace(".py", "")
		)

		# Create a new plugin instance
		try:
			exec "p = {0}(\"{1}\", \"{2}\")".format(pluginname,	path, tempdir)
		except plugins.VirtInstTestPlugin.UnsupportedOS:
			# Plugin didn't detect a supported OS, so let's
			# give other plugins a chance
			continue

		# Read the plugin's installation monitoring rules
		rules = []
		rulesfile = re.sub("_plugin.py", ".instmonrules", pluginfile)
		try:
			with open(rulesfile, "r") as f:
				lineno = 0
				for line in f.readlines():
					lineno = lineno + 1
					line = line.strip()
					if len(line)>0 and not line.startswith("#"):
						parts = re.split("\t+", line)
						if len(parts) != 7:
							msg = "{0}, line {1}: invalid format, seven tab-separated columns expected!"
							msg = msg.format(rulesfile, lineno)
							logger.error(msg)
							sys.exit(-1)
						rule = dict(zip([
							"state",
							"newstate",
							"newtimeout",
							"genfunc",
							"testfunc",
							"testarg",
							"logmsg"
						], parts))

						for key in [ "state", "newstate", "newtimeout" ] :
							try:
								rule[key] = int(rule[key])
							except TypeError as e:
								msg = "{0}, line {1}: invalid {2} {3}, number expected!"
								msg = msg.format(rulesfile, lineno, key, rule[key])
								logger.error(msg)
								sys.exit(-1)

						if rule["genfunc"] == "-":
							rule["genfunc"] = None
						rules.append(rule)
		except IOError as e:
			msg = "Could not open {0}'s rules file {1}: {2}!"
			msg = msg.format(pluginame, rulesfile, e.strerror)
			logger.error(msg)
			sys.exit(-1)

		logger.debug("Read {0} installation monitoring rules.".format(len(rules)))

		return p, rules

	# No plugin found that could detect a supported OS
	return (None, None)

def CreateTempDir():
	tempdir = tempfile.mkdtemp(prefix="virtinsttest.")

	def DeleteTempDir():
		if "inststate" not in globals() or (inststate == INSTSTATE_STAGE1_FINISHED and not args.keeptmpdir):
			logger.info("Removing temporary directory {0}...".format(tempdir))
			shutil.rmtree(tempdir)
		else:
			logger.info("Keeping temporary directory {0} for inspection.".format(tempdir))
	atexit.register(DeleteTempDir)

	return tempdir

def ConnectToLibvirtd():
	global conn

	conn = libvirt.open(args.libvirtduri)
	if conn:
		logger.info("Connection to libvirtd instance at \"{0}\" established.".format(args.libvirtduri))
	else:
		logger.error("Could not connect to libvirtd at {0}!".format(args.libvirtduri))
		sys.exit(1)

def EnsureLibvirtdConnection(orig_func):
	""" A decorator that ensures that the libvirtd connection still exists
	    before the decorated function gets executed. """

	def decorated_func(*args):
		if not conn.isAlive():
			ConnectToLibvirtd()
		return orig_func(*args)
	return decorated_func

def ConvertHumanReadableSize(size, stopat=""):
	""" Computes a size from a human-readable representation with units
	    such as MB. """

	m = re.search("(\d+)([tTgGmMkK])[bB]?$", size)
	if m:
		if m.group(2).lower() == "t":
			return int(m.group(1))*1024*1024*1024*1024
		elif m.group(2).lower() == "g":
			return int(m.group(1))*1024*1024*1024
		elif m.group(2).lower() == "m":
			return int(m.group(1))*1024*1024
		elif m.group(2).lower() == "k":
			return int(m.group(1))*1024

	return size

def CreateISOStoragePool():
	poolname = "{0}_isopool".format(cfg["instname"])
	logger.info("- Creating storage pool \"{0}\" for ISO image \"{1}\"...".format(poolname, cfg["isoimage"]))

	atexit.register(DeleteISOStoragePool, poolname)

	xml = "<pool type='dir'>" \
	      "<name>{0}</name>" \
	      "<target>" \
	      "<path>{1}</path>" \
	      "</target>" \
	      "</pool>"
	xml = xml.format(poolname, os.path.dirname(cfg["isoimage"]))
	pool = conn.storagePoolCreateXML(xml, 0)

	return poolname

def DeleteISOStoragePool(poolname):
	if ("inststate" in globals() and inststate != INSTSTATE_STAGE1_FINISHED) or not args.keepvm:
		logger.info("Deleting ISO image storage pool \"{0}\"...".format(poolname))

		if not conn.isAlive():
			ConnectToLibvirtd()

		conn.storagePoolLookupByName(poolname).destroy()

def CreateVirtualDisk(disk):
	disk["imagename"] = "{0}_{1}.qcow2".format(cfg["instname"], disk["name"])

	logger.info("- Creating virtual disk image \"{0}\" ({1} bytes)...".format(disk["imagename"], disk["size"]))

	atexit.register(DeleteVirtualDisk, disk["imagename"])

	xml = "<volume>" \
	      "<name>{0}</name>" \
	      "<capacity>{1}</capacity>" \
	      "<target><format type='qcow2'/></target>" \
	      "</volume>"
	xml = xml.format(disk["imagename"], disk["size"])
	libvirt.virStoragePool.createXML(
		storagepool, xml,
		libvirt.VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA
	)

	return disk

def DeleteVirtualDisk(imagename):
	if ("inststate" in globals() and inststate != INSTSTATE_STAGE1_FINISHED) or not args.keepvm:
		logger.info("Deleting virtual disk image \"{0}\"...".format(imagename))

		if not conn.isAlive():
			ConnectToLibvirtd()

		libvirt.virStoragePool.storageVolLookupByName(storagepool, imagename).delete()

def CreateUSBStick(i, usbstick):
	logger.info("- Setting up USB stick {0}:".format(i))

	tararchivename = "{0}.tar".format(usbstick["sourcedir"])
	logger.info("  - Creating tar archive from source directory \"{0}\"...".format(usbstick["sourcedir"]))
	tararchive = tarfile.open(tararchivename, "w")
	tararchive.add(usbstick["sourcedir"], arcname="")
	tararchive.close()

	# Create a virtual disk image
	usbstick = CreateVirtualDisk(usbstick)

	logger.info("  - Opening the virtual disk image...")
	imagepath = libvirt.virStoragePool.storageVolLookupByName(storagepool, usbstick["imagename"]).path()
	g = guestfs.GuestFS(python_return_dict=True)
	g.add_drive_opts(imagepath)
	try:
		g.launch()
	except Exception as e:
		raise

	logger.info("  - Creating ext4 filesytem on it...")
	devices = g.list_devices()
	g.mkfs("ext4", devices[0])

	logger.info("  - Mounting this filesystem...")
	g.mount(devices[0], "/")

	logger.info("  - Extracting tar archive into filesystem root...")
	g.tar_in(tararchivename, "/")

	logger.info("  - Closing virtual disk image...")
	g.close()

	logger.info("  - Removing tar archive...")
	os.remove(tararchivename)

	return usbstick

def GenerateVirtInstallCmd():
	cmd = "virt-install" \
	      " --connect {libvirtduri}" \
	      " --name \"{instname}\"" \
	      " --virt-type kvm" \
	      " --vcpus {cpus}" \
	      " --memory {memory}" \
	      " --graphics spice" \
	      " --sound default" \
	      " --nonetworks" \
	      " --os-variant {osvariant}" \
	      " --location {mountpoint}" \
	      " --disk vol={isopool}/{isoimage},bus=ide,device=cdrom".format(
		libvirtduri = args.libvirtduri,
		instname = cfg["instname"],
		cpus = cfg["cpus"],
		memory = cfg["memory"] / (1024*1024),
		osvariant = p.getOSVariant(),
		mountpoint = cfg["mountpoint"],
		isopool = isopool,
		isoimage = os.path.basename(cfg["isoimage"])
	)

	for virtualdisk in cfg["virtualdisks"]:
		diskstr = " --disk vol=default/{imagename},bus=virtio,boot_order={bootorder}"
		diskstr = diskstr.format(
			imagename = virtualdisk["imagename"],
			bootorder = virtualdisk["bootorder"]
		)
		cmd += diskstr

	for usbstick in cfg["usbsticks"]:
		stickstr = " --disk vol=default/{imagename},bus=usb,removable=on"
		stickstr = stickstr.format(
			imagename = usbstick["imagename"]
		)
		cmd += stickstr

	filesystems = p.getVirtInstallFilesystemArgs()
	if filesystems:
		for src in filesystems:
			cmd += " --filesystem={0},{1},mode=mapped".format(src,filesystems[src])

	injects = p.getVirtInstallInitrdInjectArgs()
	if injects:
		for inject in injects:
			cmd += " --initrd-inject={0}".format(inject)

	a = p.getVirtInstallExtraArgs()
	b = [ cfg["extraargs"] ]
	extraargs = (a+b) if a and b else a or b
	cmd += " --extra-args=\"" + " ".join(extraargs) + "\""

	cmd += " --noautoconsole" \
	       " --noreboot" \
	       " --debug"

	return cmd

@EnsureLibvirtdConnection
def LookupVMByName(name):
	""" Alternative to libvirt's conn.lookupByName() which triggers ugly
	    errors on stderr if a domain (a VM) can not be found. """

	domains = conn.listAllDomains()
	for domain in domains:
		if domain.name() == name:
			return domain

	return None

@EnsureLibvirtdConnection
def StartVM(cmd):
	logger.info("Calling virt-install to create VM and start installation...")
	logger.debug(cmd)
	try:
		output = subprocess.check_output(
			cmd, shell=True, env=dict(os.environ, LANG="C"), stderr=subprocess.STDOUT
		)
	except subprocess.CalledProcessError as e:
		logger.error("The following virt-install command line exited with error code {0}:\n  {1}".format(e.returncode, cmd))
		logger.error("-" * 75)
		logger.error("{0}".format(e.output.strip()))
		logger.error("-" * 75)
		sys.exit(1)
	domain = None
	for _ in range(10):
		domain = LookupVMByName(cfg["instname"])
		if domain:
			break
		time.sleep(0.1)
	if domain:
		atexit.register(KillVM)
		logger.info("VM now running in background, use virt-manager to access the console, if desired.")
	else:
		logger.error("virt-install failed!")
		sys.exit(1)

@EnsureLibvirtdConnection
def KillVM():
	if ("inststate" in globals() and inststate != INSTSTATE_STAGE1_FINISHED) or not args.keepvm:
		try:
			domain = LookupVMByName(cfg["instname"])
			if domain:
				state = domain.state()[0]
				if state != libvirt.VIR_DOMAIN_SHUTOFF:
					logger.info("Stopping (destroying) VM...")
					domain.destroy()

				logger.info("Deleting (undefining) VM...")
				domain.undefineFlags(
					libvirt.VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA
				)
		except libvirt.libvirtError:
			pass

@EnsureLibvirtdConnection
def LookupVMSnapshotByName(name):
	""" Alternative to libvirt's domain.snapshotLookupByName() which
	    triggers ugly errors on stderr if a snapshot can not be found. """

	domain = LookupVMByName(cfg["instname"])
	if domain:
		snapshots = domain.listAllSnapshots()
		for snapshot in snapshots:
			if snapshot.getName() == name:
				return snapshot

	return None

@EnsureLibvirtdConnection
def CreateVMSnapshot(name):
	logger.info("Creating VM snapshot \"{0}\"...".format(name))
	domain = LookupVMByName(cfg["instname"])
	if domain:
		atexit.register(DeleteVMSnapshot, name)

		xml= "<domainsnapshot>" \
		     "<name>{0}</name>" \
		     "<description>Created by virtinsttest</description>" \
		     "<disks>"
		xml = xml.format(name)
		for disk in cfg["virtualdisks"]:
			imagefile = storagepool.storageVolLookupByName(disk["imagename"]).path()
			diskxml = "<disk name=\"{0}\" snapshot=\"external\">" \
			          "<source file=\"{1}\" />" \
			          "</disk>"
			diskxml = diskxml.format(
				imagefile,
				re.sub(".qcow2", "_{0}.qcow2".format(name), imagefile)
			)
			xml = xml + diskxml
		for _, disk in enumerate(cfg["usbsticks"]):
			imagefile = storagepool.storageVolLookupByName(disk["imagename"]).path()
			diskxml = "<disk name=\"{0}\" snapshot=\"no\">" \
			          "</disk>"
			diskxml = diskxml.format(imagefile)
			xml = xml + diskxml
		xml = xml + "</disks>" \
		            "</domainsnapshot>"
		try:
			snapshot = domain.snapshotCreateXML(
				xml,
				libvirt.VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY
			)

			# Refresh storagepool in which the snapshot backing files
			# were created, so libvirt is aware of the volumes
			storagepool.refresh()
		except libvirt.libvirtError as e:
			logger.error("Could not create snapshot: {0}!".format(e))
			sys.exit(-1)
	else:
		logger.error("VM apparantly got undefined before snapshot could be taken!")
		sys.exit(-1)

@EnsureLibvirtdConnection
def DeleteVMSnapshot(name):
	snapshot = LookupVMSnapshotByName(name)
	if snapshot:
		logger.info("Deleting VM snapshot \"{0}\"...".format(name))

		try:
			# libvirt still doesn't support deleting external snapshots.
			# Doh! Never mind, we can safely just delete the underlying
			# disk images because IF we are deleting snapshots we're tearing
			# down everything else with them as well.
			for disk in cfg["virtualdisks"]:
				snapshotfile = re.sub(".qcow2", "_{0}.qcow2".format(name), disk["imagename"])
				DeleteVirtualDisk(snapshotfile)
		except libvirt.libvirtError:
			logger.error("Could not delete snapshot \"{0}\"!".format(name))

@EnsureLibvirtdConnection
def VMState():
	domain = LookupVMByName(cfg["instname"])
	if domain:
		vmstate, vmreason = domain.state()
		if vmstate == libvirt.VIR_DOMAIN_SHUTOFF:
			if vmreason == libvirt.VIR_DOMAIN_SHUTOFF_SHUTDOWN:
				return 0
			else:
				return -1

		return 1
	else:
		return -2

@EnsureLibvirtdConnection
def CaptureVMConsole(footertext, footerdata):
	global video

	# If creating the video has not been enabled, just return
	if not args.video:
		return

	# Check if VM is active
	if VMState() == 1:
		# Tell libvirt to take a screenshot of the first screen (requires
		# the virStream object we created in ConnectToLibvirtd()
		stream = conn.newStream()
		domain = LookupVMByName(cfg["instname"])
		try:
			domain.screenshot(stream, 0, 0)
		except libvirt.libvirtError:
			return

		# Transfer the image data of yet unknown size from libvirt into
		# a StringIO buffer, sort of an in-memory file
		buf = StringIO.StringIO()
		def writer(stream, data, buf):
			buf.write(data)
		stream.recvAll(writer, buf)
		buf.seek(0)
		stream.finish()

		# Create a Python Image Library Image object out of the buffer
		image = PIL.Image.open(buf)

		# Test whether configured video width/height is sufficient for
		# the current screenshot
		(width, height) = image.size
		if width > args.videowidth:
			logger.error("VM console width {0} > configured video width {1}, specify increased --video-width!".format(width, args.videowidth))
			sys.exit(-1)
		if height > args.videoheight:
			logger.error("VM console height {0} > configured video height {1}, specify increased --video-height!".format(height, args.videoheight))
			sys.exit(-1)
	else:
		# VM is not active, produce a black image
		image = PIL.Image.new("RGB", (args.videowidth, args.videoheight), "black")

	# Add vertical space for footer
	footerlines = 1 + p.getMaxFooterDataLines()
	newimage = PIL.Image.new(image.mode, (args.videowidth, args.videoheight + footerlines * 20), PIL.ImageOps._color("grey", image.mode))
	newimage.paste(image, (0, 0))

	# Add footer
	footer = "{0} [I{1:02}:{2:03}<{3:03}s] {4}".format(
		time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(now)),
		inststate,
		int(now - inststatetime),
		inststatetimeout,
		footertext
	)
	font = PIL.ImageFont.truetype(args.videofont, 15, encoding="unic")
	draw = PIL.ImageDraw.Draw(newimage)
	draw.rectangle(
		[(0, args.videoheight + 1), (args.videowidth, args.videoheight + footerlines * 20)],
		fill="lightgrey"
	)
	draw.line(
		[(0, args.videoheight + 1), (args.videowidth, args.videoheight + 1)],
		fill="white",
		width=1
	)
	draw.text(
		(2, args.videoheight + 3),
		footer,
		fill="black",
		font=font
	)
	if footerlines > 1:
		draw.line(
			[(0, args.videoheight + 21), (args.videowidth, args.videoheight + 21)],
			fill="black",
			width=1
		)
		yoffset = args.videoheight + 23
		for line in footerdata:
			draw.text(
				(2, yoffset),
				line,
				fill="black",
				font=font
			)
			yoffset = yoffset + 20

	# Open the video file, if necessary
	if not "video" in globals():
		logger.info("Capturing VM console output into {0}, {1}x{2} pixels @ {3} fps...".format(
			args.video,
			args.videowidth,
			args.videoheight,
			args.videoframerate
		))
		video = cv2.VideoWriter(
			args.video,
			cv2.cv.CV_FOURCC(*'MJPG'),
			args.videoframerate,
			(args.videowidth, args.videoheight + footerlines*20)
		)

		# Close it properly when exiting
		atexit.register(video.release)

	# Write out the screenshot as a frame
	video.write(cv2.cvtColor(numpy.array(newimage), cv2.COLOR_RGB2BGR))

# ----------------------------- Main code -----------------------------

# Process command line arguments
args = ProcessCmdLineArgs()

# Initialize logging
args.loglevel = args.loglevel.upper()
if args.loglevel in logging._levelNames:
	args.loglevel = logging._levelNames[args.loglevel]
else:
	print "ERROR: Invalid loglevel \"{0}\"!".format(args.loglevel)
	sys.exit(1)
SetupLogging(args.loglevel)

# The main program and each plugin use their own loggers
logger = logging.getLogger("virtinsttest")

# Print banner
logger.info("virtinsttest -- Virtual installation testing script")
logger.info("Copyright (c) 2015 Pieter Hollants <pieter@hollants.com>")

# Install the global exception handler so that unhandled exceptions in the
# code executed after this call get logged
sys.excepthook = GlobalExceptionHandler

# Read the configuration file
cfg = ReadConfigFile(args.cfgfile)

# Print a configuration summary
logger.info("Virtual installation setup obtained from config file:")
logger.info("- Installation name: {0}".format(cfg["instname"]))
logger.info("- {0} CPUs, {1} memory".format(cfg["cpus"], cfg["memory"]))
cfg["memory"] = ConvertHumanReadableSize(cfg["memory"])
for i, virtualdisk in enumerate(cfg["virtualdisks"]):
	msg = "- Virtual disk {0}: \"{1}\", {2}, Boot order: {3}"
	logger.info(msg.format(i+1, virtualdisk["name"], virtualdisk["size"], virtualdisk["bootorder"]))
	virtualdisk["size"] = ConvertHumanReadableSize(virtualdisk["size"])

logger.info("- Installation ISO image : \"{0}\"".format(cfg["isoimage"]))
logger.info("- Installation mountpoint: \"{0}\"".format(cfg["mountpoint"]))
for i, usbstick in enumerate(cfg["usbsticks"]):
	msg = "- USB Stick {0}: {1}, source directory \"{2}\""
	logger.info(msg.format(i+1, usbstick["size"], usbstick["sourcedir"]))
	usbstick["size"] = ConvertHumanReadableSize(usbstick["size"])

# Make the plugin directory available for importing and import the
# plugin API
sys.path.insert(0, args.plugindir)
import plugins

# Create the temporary directory
tempdir = CreateTempDir()
logger.info("Using temporary directory \"{0}\".".format(tempdir))

# Detect the operating system to be installed
global p
(p, rules) = DetectOS(cfg["mountpoint"])
if not p:
	logger.error("Could not detect a supported OS at {0}!".format(cfg["mountpoint"]))
	sys.exit(1)

# Import libvirt and guestfs
try:
	for module in [ "libvirt", "guestfs" ] :
		exec("import {0}".format(module))
except ImportError:
	logger.error("Could not import {0} Python module -- python-guestfs package missing?".format(module))
	sys.exit(1);

# Connect to libvirtd
ConnectToLibvirtd()

# Set up storage
logger.info("Setting up configured storage:")
isopool = CreateISOStoragePool()
storagepool = libvirt.virConnect.storagePoolLookupByName(conn, "default")
for disk in cfg["virtualdisks"]:
	disk = CreateVirtualDisk(disk)
for i, usbstick in enumerate(cfg["usbsticks"]):
	usbstick = CreateUSBStick(i+1, usbstick)

# Now generate virt-install command and start VM
StartVM(GenerateVirtInstallCmd())

# The VM installation uses a finite state machine (FSM) that must transition
# away from the initial installation state 0 in at most three minutes,
# otherwise we'll assume that booting kernel and installation system has
# failed. Installation monitoring rules including additional installation
# states and transitions are defined in OS-specific *.instmonrules files
# and were read into the "rules" list in DetectOS().
inststate        = 0
inststatetime    = statstime = now = time.time()
inststatetimeout = 180

lastlogmsg = "Booting kernel and installation system..."
footerdata = []
logger.info("[I00:<180s] {0}".format(lastlogmsg))
CaptureVMConsole(lastlogmsg, footerdata)
snapshottime = now

# The big VM installation monitoring loop
rc = 0
while rc == 0:
	# Check general VM state
	vmstate = VMState()
	if vmstate == 0:
		logger.info("VM shut off after regular shutdown.")
	elif vmstate == -1:
		logger.error("VM shut off without regular shutdown (reason code: {0})".format(vmreason))
	elif vmstate == -2:
		logger.error("VM completely unknown to libvirt any longer, did somebody probably interfere?")
	if vmstate < 1:
		rc = vmstate
		break

	now = time.time()

	# Call any data generator functions defined by installation
	# monitoring rules for the current installation state. These functions
	# generate data that may then be used by installation monitoring rules
	# to decide on state transitions.
	data = {}
	for r in [r for r in rules if r["state"] == inststate and r["genfunc"]]:
		# Each data generator function gets called only once to yield
		# the next data element (eg. logfile line)
		if r["genfunc"] not in data:
			# A particular data generator function may at this time have
			# no new data to offer
			try:
				data[r["genfunc"]] = getattr(p, r["genfunc"])().next()
			except StopIteration:
				data[r["genfunc"]] = None

	# Have the OS-specific plugin prepare footer data just in case
	# we're going to take a screenshot
	footerdata = p.getFooterData(data)

	# Process installation monitoring rules for the current installation
	# state
	for r in [r for r in rules if r["state"] == inststate]:
		# A rule's test method might require additional input data
		# obtained from previously called data generator functions
		if r["genfunc"]:
			if data[r["genfunc"]] == None:
				continue
			testfuncargs = (r["logmsg"], r["testarg"], data[r["genfunc"]])
		else:
			testfuncargs = (r["logmsg"], r["testarg"])

		# Execute the test method which returns a logmessage if transition
		# to the current rule's newstate is desired and "None" otherwise
		logmsg = getattr(p, r["testfunc"])(*testfuncargs)
		if logmsg:
			# State transition, apply new state and timeout
			inststate        = r["newstate"]
			inststatetime    = now
			inststatetimeout = r["newtimeout"]
			lastlogmsg       = logmsg

			logger.info("[I{0:02}:<{1:03}s] {2}".format(inststate, inststatetimeout, logmsg))

			CaptureVMConsole(logmsg, footerdata)
			snapshottime = now

			break

	# Check the current installation state's timeout set by previously
	# applied rules
	if (now - inststatetime) > inststatetimeout:
		msg = "Got stuck in installation state I{0:02} for more than {1} seconds, aborting installation."
		msg = msg.format(inststate, inststatetimeout)
		logger.error(msg)
		CaptureVMConsole(msg, footerdata)

		# Kill VM
		KillVM()

		rc = -1
		break

	# Take screenshot
	if now - snapshottime > (1/args.videoframerate):
		snapshottime = now
		CaptureVMConsole(lastlogmsg, p.getFooterData(data))

	# Statistics hook
	if now - statstime > 1:
		statstime = now
		logmsg = p.getStats(data)
		if logmsg:
			logger.debug(logmsg)

# Something went wrong above?
if inststate != INSTSTATE_STAGE1_FINISHED:
	logger.error("Installation stage 1 doesn't seem to have been completed, exiting!")
	sys.exit(1)

# Take a snapshot
CreateVMSnapshot("Stage1_Finished")
